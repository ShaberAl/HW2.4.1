struct Question {
    let title: String
    let type: ResponseType
    let answers: [Answer]
    
    static func getQuestions() -> [Question] {
        [
            Question(title: "–ö–∞–∫—É—é –ø–∏—â—É –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
                     type: .single,
                     answers: [
                        Answer(title: "–°—Ç–µ–π–∫", type: .dog),
                        Answer(title: "–†—ã–±–∞", type: .cat),
                        Answer(title: "–ú–æ—Ä–∫–æ–≤—å", type: .turtle),
                        Answer(title: "–ö—É–∫—É—Ä—É–∑–∞", type: .rabbit)
                     ]),
            Question(title: "–ß—Ç–æ –í–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ?",
                     type: .multiple,
                     answers: [
                        Answer(title: "–ü–ª–∞–≤–∞—Ç—å", type: .dog),
                        Answer(title: "–°–ø–∞—Ç—å", type: .cat),
                        Answer(title: "–û–±–Ω–∏–º–∞—Ç—å—Å—è", type: .rabbit),
                        Answer(title: "–ï—Å—Ç—å", type: .turtle)
                     ]),
            Question(title: "–õ—é–±–∏—Ç–µ –ª–∏ –í—ã –ø–æ–µ–∑–¥–∫–∏ –Ω–∞ –º–∞—à–∏–Ω–µ?",
                     type: .ranged,
                     answers: [
                        Answer(title: "–ù–µ–Ω–∞–≤–∏–∂—É", type: .dog),
                        Answer(title: "–ù–µ—Ä–≤–Ω–∏—á–∞—é", type: .cat),
                        Answer(title: "–ù–µ –∑–∞–º–µ—á–∞—é", type: .rabbit),
                        Answer(title: "–õ—é–±–ª—é", type: .turtle)
                     ])
        ]
    }
}

struct Answer {
    let title: String
    let type: AnimalType
}

enum ResponseType {
    case single
    case multiple
    case ranged
}

enum AnimalType: Character {
    case dog = "üê∂"
    case cat = "üê±"
    case rabbit = "üê∞"
    case turtle = "üê¢"
    
    var definition: String {
        switch self {
        case .dog:
            return "–í–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –±—ã—Ç—å —Å –¥—Ä—É–∑—å—è–º–∏. –í—ã –æ–∫—Ä—É–∂–∞–µ—Ç–µ —Å–µ–±—è –ª—é–¥—å–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –í–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è, –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å."
        case .cat:
            return "–ì—É–ª—è–µ—à—å —Å–∞–º –ø–æ —Å–µ–±–µ, —Å–∏–ª—å–Ω—ã–π –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π."
        case .rabbit:
            return "–ß—É–µ—à—å –æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –≥–æ—Ç–æ–≤ –¥–µ—Ä–∂–∞—Ç—å—Å—è –æ—Ç –Ω–µ—ë –ø–æ–¥–∞–ª—å—à–µ."
        case .turtle:
            return "–°–∞–º–∞ –≤–æ–¥—è–Ω–∞—è –Ω–µ–æ—Ç–≤—Ä–∞—Ç–∏–º–æ—Å—Ç—å."
        }
    }
}
